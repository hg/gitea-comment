#!/bin/sh

set -eu

note() {
  echo >&2 "NOTE: $*"
}

die() {
  echo >&2 "ERROR: $*"
  exit 1
}

[ -z "${GITEA_TOKEN:-}" ] && die 'GITEA_TOKEN not set'

base=${CI_FORGE_URL:-${GITEA_BASE:-}}
[ -z "$base" ] && die 'CI_FORGE_URL / GITEA_BASE not set'

# sanity checks; this shouldn't happen if we were called by CI
owner=${CI_REPO_OWNER:-${DRONE_REPO_NAMESPACE:-}}
[ -z "$owner" ] && die 'CI_REPO_OWNER / DRONE_REPO_NAMESPACE not set'

repository=${CI_REPO_NAME:-${DRONE_REPO_NAME:-}}
[ -z "$repository" ] && die 'CI_REPO_NAME / DRONE_REPO_NAME not set'

pr=${CI_COMMIT_PULL_REQUEST:-${DRONE_PULL_REQUEST:-}}

if [ -n "${MESSAGE:-}" ]; then
  [ -z "${SUCCESS_MESSAGE:-}" ] || die 'please set either SUCCESS_MESSAGE or MESSAGE'
  [ -z "${FAILURE_MESSAGE:-}" ] || die 'please set either FAILURE_MESSAGE or MESSAGE'
  note 'using text from MESSAGE'
  message="$MESSAGE"
else
  status=${CI_PREV_PIPELINE_STATUS:-${DRONE_STAGE_STATUS:-}}

  if [ "$status" = success ]; then
    note 'using text from SUCCESS_MESSAGE'
    message="${SUCCESS_MESSAGE:-}"
  else
    note 'using text from FAILURE_MESSAGE'
    message="${FAILURE_MESSAGE:-}"
  fi
fi

if [ -z "$message" ]; then
  die 'no message was passed; use either of
  message: this text is printed on success of failure
or
  success_message: this text is printed on success
  failure_message: this text is printed on failure'
fi

if [ -f "$message" ]; then
  note "reading message from file $message"
  message=$(cat "$message")
fi

body=$(mktemp)
resp=$(mktemp)

echo "$message" | envsubst | jq --raw-input '{ body: . }' >"$body"

comment() {
  curl \
    --location \
    --silent \
    --show-error \
    --fail-with-body \
    --header "Authorization: token $GITEA_TOKEN" \
    --json "@$body" \
    --output "$resp" \
    "$base/api/v1/repos/$1/issues/$2/comments"

  jq --color-output . <"$resp"
}

git config --global --add safe.directory "$CI_WORKSPACE"

comments=$(mktemp)
(
  git log --no-patch --format=%B origin/"$CI_COMMIT_BRANCH"..HEAD || :
  git show --no-patch --format=%B HEAD || :
) | grep -v -i -E '^WIP:' >"$comments"

(
  if [ -n "$pr" ]; then
    echo "$owner/$repository" "$pr"
  fi
  sed -E -n 's~.*https?://[^/]+/([^/]+/[^/]+)/(issues|pulls)/([[:digit:]]+).*~\1 \3~p' "$comments" # https://git.example.com/owner/repo/issues/555
  sed -E -n 's~.*\b([-._[:alnum:]]+/[-._[:alnum:]]+)[#!]([[:digit:]]+).*~\1 \2~p' "$comments"      # owner/repo#836
  sed -E -n "s~.*[#!]([[:digit:]]+).*~$CI_REPO \1~p" "$comments"                                   # #836
) |
  sort -u |
  while read -r repo iss; do
    comment "$repo" "$iss"
  done

rm -f "$body" "$resp"
